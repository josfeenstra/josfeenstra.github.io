/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_logic_free(a: number): void;
export function logic_and(a: number, b: number): number;
export function logic_or(a: number, b: number): number;
export function logic_not(a: number): number;
export function logic_equals(a: number, b: number): number;
export function logic_smaller(a: number, b: number): number;
export function logic_greater(a: number, b: number): number;
export function logic_smaller_or_equals(a: number, b: number): number;
export function logic_greater_or_equals(a: number, b: number): number;
export function start(): void;
export function __wbg_boundingbox_free(a: number): void;
export function boundingbox_new(a: number, b: number): number;
export function boundingbox_new_from_bounds(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function boundingbox_new_from_radii(a: number, b: number, c: number): number;
export function __wbg_basics_free(a: number): void;
export function basics_add(a: number, b: number): number;
export function basics_sub(a: number, b: number): number;
export function basics_mul(a: number, b: number): number;
export function basics_div(a: number, b: number): number;
export function basics_sin(a: number): number;
export function basics_cos(a: number): number;
export function basics_tan(a: number): number;
export function __wbg_pointcloud_free(a: number): void;
export function pointcloud_new_from_buffer(a: number, b: number): number;
export function pointcloud_version(a: number, b: number): void;
export function pointcloud_bounds(a: number, b: number): void;
export function pointcloud_to_array(a: number, b: number): void;
export function pointcloud_length_of_buffer(a: number, b: number): number;
export function pointcloud_gf_has_trait_renderable(): number;
export function pointcloud_gf_get_shader_type(): number;
export function pointcloud_gf_get_bounding_box(a: number): number;
export function __wbg_point_free(a: number): void;
export function point_new(a: number, b: number, c: number): number;
export function point_add_num(a: number, b: number, c: number, d: number): void;
export function point_gf_has_trait_typed(): number;
export function point_gf_is_convertable_to(a: number): number;
export function point_gf_default(): number;
export function point_gf_to_json(a: number): number;
export function point_gf_from_json(a: number): number;
export function point_gf_has_trait_descriptive(): number;
export function point_gf_get_description(): number;
export function point_gf_has_trait_iterable(): number;
export function point_gf_get_base_type(): number;
export function point_gf_get_length(a: number): number;
export function point_gf_get_item(a: number, b: number, c: number): void;
export function __wbg_misc_free(a: number): void;
export function misc_write_obj(a: number, b: number, c: number, d: number, e: number): void;
export function misc_write_las(a: number, b: number, c: number): void;
export function misc_load_las(a: number, b: number, c: number): void;
export function __wbg_array2_free(a: number): void;
export function __wbg_get_array2_width(a: number): number;
export function __wbg_set_array2_width(a: number, b: number): void;
export function __wbg_get_array2_height(a: number): number;
export function __wbg_set_array2_height(a: number, b: number): void;
export function __wbg_random_free(a: number): void;
export function random_new(): number;
export function random_new_from_seed(a: number): number;
export function random_spawn_points(a: number, b: number, c: number): number;
export function __wbg_multipoint_free(a: number): void;
export function multipoint_new(): number;
export function multipoint_new_from_array(a: number, b: number): number;
export function multipoint_new_from_pointcloud(a: number): number;
export function multipoint_push_pt(a: number, b: number): void;
export function multipoint_scale(a: number, b: number): void;
export function multipoint_get_data(a: number, b: number): void;
export function multipoint_calc_bounding_box(a: number): number;
export function multipoint_gf_has_trait_renderable(): number;
export function multipoint_gf_get_shader_type(): number;
export function multipoint_gf_get_bounding_box(a: number): number;
export function multipoint_gf_get_buffers(a: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_start(): void;
